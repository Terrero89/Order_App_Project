{"ast":null,"code":"var _jsxFileName = \"/home/terrero/Documents/Web Development/Frontend/React_Projects/food_order_app/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context';\n\n//this component is used to wrap the component PROVIDER, so it\n//can be easily used to wrap any element that will receive any\n//data from this provider\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n//state: last snapshot or update of data\n//actions: will dispatch actions that will be changing the state\n//cartReducer returns default state updated\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //to determine price total price of specific item\n    //concat add item and return new array, push does not\n\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id); //will find especific ide to find.\n    const existingCartItem = state.items[existingCartItemIndex]; // will check if item exist and will not add it.\n\n    let updatedItems;\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItem = {\n        ...action.item\n      };\n      updatedItems = state.items.concat(updatedItem);\n    }\n    updatedItems = state.items.concat(action.item); // adding the item to the array\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n  // if(action.type === 'REMOVE_ITEM'){\n  //\n  // }\n\n  return defaultCartState;\n};\nconst CartProvider = props => {\n  _s();\n  //destructure to assign variables to a different constants\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  //logic: if existing item -> update the amount\n  //if not existing item -> then add new item and update amount\n  //useState or usereducer can update state\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n  const removeItemCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  //value use to be updated for provider\n  const cartContext = {\n    // items: [], we use cartState to provider current or latest snapshot\n    items: cartState.items,\n    // totalAmount: 0,we use totalAmount state to provider current or latest snapshot\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemCartHandler\n  };\n  //cartContext will be the value we are going to update or pass in the components\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 12\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","_s","cartState","dispatchCartAction","addItemCartHandler","removeItemCartHandler","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/terrero/Documents/Web Development/Frontend/React_Projects/food_order_app/src/store/CartProvider.js"],"sourcesContent":["import React, {useReducer} from 'react';\nimport CartContext from './cart-context';\n\n//this component is used to wrap the component PROVIDER, so it\n//can be easily used to wrap any element that will receive any\n//data from this provider\n\n\nconst defaultCartState = {\n    items: [],\n    totalAmount: 0,\n}\n//state: last snapshot or update of data\n//actions: will dispatch actions that will be changing the state\n//cartReducer returns default state updated\nconst cartReducer = (state, action) => {\n\n    if (action.type === 'ADD') {\n        const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount //to determine price total price of specific item\n        //concat add item and return new array, push does not\n\n        const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id) //will find especific ide to find.\n        const existingCartItem = state.items[existingCartItemIndex] // will check if item exist and will not add it.\n\n        let updatedItems;\n\n        if (existingCartItem) {\n           const updatedItem = {\n                ...existingCartItem,\n                amount: existingCartItem.amount + action.item.amount\n            }\n\n            updatedItems[existingCartItemIndex] = updatedItem\n        } else {\n            updatedItem = {...action.item}\n            updatedItems = state.items.concat(updatedItem)\n        }\n        updatedItems = state.items.concat(action.item) // adding the item to the array\n\n        return {\n            items: updatedItems,\n            totalAmount: updatedTotalAmount\n        }\n    }\n    // if(action.type === 'REMOVE_ITEM'){\n    //\n    // }\n\n    return defaultCartState\n}\nconst CartProvider = (props) => {\n    //destructure to assign variables to a different constants\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n\n    //logic: if existing item -> update the amount\n    //if not existing item -> then add new item and update amount\n    //useState or usereducer can update state\n    const addItemCartHandler = item => {\n        dispatchCartAction({type: \"ADD\", item: item})\n    }\n    const removeItemCartHandler = id => {\n        dispatchCartAction({type: \"REMOVE\", id: id})\n    }\n\n    //value use to be updated for provider\n    const cartContext = {\n        // items: [], we use cartState to provider current or latest snapshot\n        items: cartState.items,\n        // totalAmount: 0,we use totalAmount state to provider current or latest snapshot\n        totalAmount: cartState.totalAmount,\n        addItem: addItemCartHandler,\n        removeItem: removeItemCartHandler,\n    }\n    //cartContext will be the value we are going to update or pass in the components\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n\n    </CartContext.Provider>\n}\n\nexport default CartProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,UAAU,QAAO,OAAO;AACvC,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACjB,CAAC;AACD;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAEnC,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACvB,MAAMC,kBAAkB,GAAGH,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACG,IAAI,CAACC,KAAK,GAAGJ,MAAM,CAACG,IAAI,CAACE,MAAM,EAAC;IACtF;;IAEA,MAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAK,CAACW,SAAS,CAACJ,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAKR,MAAM,CAACG,IAAI,CAACK,EAAE,CAAC,EAAC;IACxF,MAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAK,CAACU,qBAAqB,CAAC,EAAC;;IAE5D,IAAII,YAAY;IAEhB,IAAID,gBAAgB,EAAE;MACnB,MAAME,WAAW,GAAG;QACf,GAAGF,gBAAgB;QACnBJ,MAAM,EAAEI,gBAAgB,CAACJ,MAAM,GAAGL,MAAM,CAACG,IAAI,CAACE;MAClD,CAAC;MAEDK,YAAY,CAACJ,qBAAqB,CAAC,GAAGK,WAAW;IACrD,CAAC,MAAM;MACHA,WAAW,GAAG;QAAC,GAAGX,MAAM,CAACG;MAAI,CAAC;MAC9BO,YAAY,GAAGX,KAAK,CAACH,KAAK,CAACgB,MAAM,CAACD,WAAW,CAAC;IAClD;IACAD,YAAY,GAAGX,KAAK,CAACH,KAAK,CAACgB,MAAM,CAACZ,MAAM,CAACG,IAAI,CAAC,EAAC;;IAE/C,OAAO;MACHP,KAAK,EAAEc,YAAY;MACnBb,WAAW,EAAEK;IACjB,CAAC;EACL;EACA;EACA;EACA;;EAEA,OAAOP,gBAAgB;AAC3B,CAAC;AACD,MAAMkB,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAG1B,UAAU,CAACO,WAAW,EAAEH,gBAAgB,CAAC;;EAEjF;EACA;EACA;EACA,MAAMuB,kBAAkB,GAAGf,IAAI,IAAI;IAC/Bc,kBAAkB,CAAC;MAAChB,IAAI,EAAE,KAAK;MAAEE,IAAI,EAAEA;IAAI,CAAC,CAAC;EACjD,CAAC;EACD,MAAMgB,qBAAqB,GAAGX,EAAE,IAAI;IAChCS,kBAAkB,CAAC;MAAChB,IAAI,EAAE,QAAQ;MAAEO,EAAE,EAAEA;IAAE,CAAC,CAAC;EAChD,CAAC;;EAED;EACA,MAAMY,WAAW,GAAG;IAChB;IACAxB,KAAK,EAAEoB,SAAS,CAACpB,KAAK;IACtB;IACAC,WAAW,EAAEmB,SAAS,CAACnB,WAAW;IAClCwB,OAAO,EAAEH,kBAAkB;IAC3BI,UAAU,EAAEH;EAChB,CAAC;EACD;EACA,oBAAOzB,OAAA,CAACF,WAAW,CAAC+B,QAAQ;IAACC,KAAK,EAAEJ,WAAY;IAAAK,QAAA,EAC3CX,KAAK,CAACW;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEI;AAC3B,CAAC;AAAAd,EAAA,CA5BKF,YAAY;AAAAiB,EAAA,GAAZjB,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}