{"ast":null,"code":"var _jsxFileName = \"/home/terrero/Documents/Web Development/Frontend/React_Projects/food_order_app/src/store/CartProvider.js\";\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context';\n\n//this component is used to wrap the component PROVIDER, so it\n//can be easily used to wrap any element that will receive any\n//data from this provider\n\n//state: last snapshot or update of data\n//actions: will dispatch actions that will be changing the state \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cartReducer = (state, action) => {};\nconst CartProvider = props => {\n  //helper functions to be explicit in\n  // the object below\n  //logic: if existing item -> update the amount\n  //if not existing item -> then add new item and update amount\n  //useState or usereducer can update state\n  const addItemCartHandler = item => {};\n  const removeItemCartHandler = item => {};\n\n  //value use to be updated for provider\n  const cartContext = {\n    items: [],\n    totalAmount: 0,\n    addItem: addItemCartHandler,\n    removeItem: removeItemCartHandler\n  };\n  //cartContext will be the value we are going to update or pass in the components\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 12\n  }, this);\n};\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","cartReducer","state","action","CartProvider","props","addItemCartHandler","item","removeItemCartHandler","cartContext","items","totalAmount","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/terrero/Documents/Web Development/Frontend/React_Projects/food_order_app/src/store/CartProvider.js"],"sourcesContent":["import React, {useReducer} from 'react';\nimport CartContext from './cart-context';\n\n//this component is used to wrap the component PROVIDER, so it\n//can be easily used to wrap any element that will receive any\n//data from this provider\n\n//state: last snapshot or update of data\n//actions: will dispatch actions that will be changing the state \nconst cartReducer = (state, action) =>{\n\n}\nconst CartProvider = (props) => {\n//helper functions to be explicit in\n// the object below\n   //logic: if existing item -> update the amount\n    //if not existing item -> then add new item and update amount\n    //useState or usereducer can update state\n    const addItemCartHandler = item =>{\n\n    }\n    const removeItemCartHandler = item =>{\n\n    }\n\n    //value use to be updated for provider\n    const cartContext = {\n        items: [],\n        totalAmount: 0,\n        addItem:addItemCartHandler,\n        removeItem:removeItemCartHandler,\n    }\n    //cartContext will be the value we are going to update or pass in the components\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n\n    </CartContext.Provider>\n}\n\nexport default CartProvider;"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,UAAU,QAAO,OAAO;AACvC,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AACA;AACA;;AAEA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAI,CAEtC,CAAC;AACD,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAChC;EACA;EACG;EACC;EACA;EACA,MAAMC,kBAAkB,GAAGC,IAAI,IAAG,CAElC,CAAC;EACD,MAAMC,qBAAqB,GAAGD,IAAI,IAAG,CAErC,CAAC;;EAED;EACA,MAAME,WAAW,GAAG;IAChBC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,CAAC;IACdC,OAAO,EAACN,kBAAkB;IAC1BO,UAAU,EAACL;EACf,CAAC;EACD;EACA,oBAAOR,OAAA,CAACF,WAAW,CAACgB,QAAQ;IAACC,KAAK,EAAEN,WAAY;IAAAO,QAAA,EAC3CX,KAAK,CAACW;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEI;AAC3B,CAAC;AAAAC,EAAA,GAzBKjB,YAAY;AA2BlB,eAAeA,YAAY;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}