{"ast":null,"code":"var _jsxFileName = \"/home/terrero/Documents/Web Development/Frontend/React_Projects/food_order_app/src/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context';\n\n//this component is used to wrap the component PROVIDER, so it\n//can be easily used to wrap any element that will receive any\n//data from this provider\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  amount: 0\n};\n//state: last snapshot or update of data\n//actions: will dispatch actions that will be changing the state\n//cartReducer returns default state updated\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD_ITEM') {\n    //concat add item and return new array, push does not\n    const updatedItems = state.concat(action.item);\n    const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n  }\n  if (action.type === 'REMOVE_ITEM') {}\n  return defaultCartState;\n};\nconst CartProvider = props => {\n  _s();\n  //destructure to assign variables to a different constants\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n\n  //logic: if existing item -> update the amount\n  //if not existing item -> then add new item and update amount\n  //useState or usereducer can update state\n  const addItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD_ITEM\",\n      item: item\n    });\n  };\n  const removeItemCartHandler = item => {\n    dispatchCartAction({\n      type: \"REMOVE_ITEM\",\n      itemId: item\n    });\n  };\n\n  //value use to be updated for provider\n  const cartContext = {\n    // items: [], we use cartState to provider current or latest snapshot\n    items: cartState.items,\n    // totalAmount: 0,we use totalAmount state to provider current or latest snapshot\n    totalAmount: cartState.totalAmount,\n    addItem: addItemCartHandler,\n    removeItem: removeItemCartHandler\n  };\n  //cartContext will be the value we are going to update or pass in the components\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 12\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","useReducer","CartContext","jsxDEV","_jsxDEV","defaultCartState","items","amount","cartReducer","state","action","type","updatedItems","concat","item","newTotalAmount","totalAmount","price","CartProvider","props","_s","cartState","dispatchCartAction","addItemCartHandler","removeItemCartHandler","itemId","cartContext","addItem","removeItem","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/terrero/Documents/Web Development/Frontend/React_Projects/food_order_app/src/store/CartProvider.js"],"sourcesContent":["import React, {useReducer} from 'react';\nimport CartContext from './cart-context';\n\n//this component is used to wrap the component PROVIDER, so it\n//can be easily used to wrap any element that will receive any\n//data from this provider\n\n\nconst defaultCartState = {\n    items: [],\n    amount: 0,\n}\n//state: last snapshot or update of data\n//actions: will dispatch actions that will be changing the state\n//cartReducer returns default state updated\nconst cartReducer = (state, action) => {\n\n    if(action.type === 'ADD_ITEM'){\n        //concat add item and return new array, push does not\n        const updatedItems = state.concat(action.item)\n        const newTotalAmount = state.totalAmount + action.item.price * action.item.amount\n    }\n    if(action.type === 'REMOVE_ITEM'){\n\n    }\n\n    return defaultCartState\n}\nconst CartProvider = (props) => {\n    //destructure to assign variables to a different constants\n    const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState)\n\n    //logic: if existing item -> update the amount\n    //if not existing item -> then add new item and update amount\n    //useState or usereducer can update state\n    const addItemCartHandler = item => {\n        dispatchCartAction({type: \"ADD_ITEM\",item:item })\n    }\n    const removeItemCartHandler = item => {\n        dispatchCartAction({type: \"REMOVE_ITEM\",itemId:item })\n    }\n\n    //value use to be updated for provider\n    const cartContext = {\n        // items: [], we use cartState to provider current or latest snapshot\n        items:cartState.items,\n        // totalAmount: 0,we use totalAmount state to provider current or latest snapshot\n        totalAmount: cartState.totalAmount,\n        addItem: addItemCartHandler,\n        removeItem: removeItemCartHandler,\n    }\n    //cartContext will be the value we are going to update or pass in the components\n    return <CartContext.Provider value={cartContext}>\n        {props.children}\n\n    </CartContext.Provider>\n}\n\nexport default CartProvider;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,UAAU,QAAO,OAAO;AACvC,OAAOC,WAAW,MAAM,gBAAgB;;AAExC;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE;AACZ,CAAC;AACD;AACA;AACA;AACA,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,MAAM,KAAK;EAEnC,IAAGA,MAAM,CAACC,IAAI,KAAK,UAAU,EAAC;IAC1B;IACA,MAAMC,YAAY,GAAGH,KAAK,CAACI,MAAM,CAACH,MAAM,CAACI,IAAI,CAAC;IAC9C,MAAMC,cAAc,GAAGN,KAAK,CAACO,WAAW,GAAGN,MAAM,CAACI,IAAI,CAACG,KAAK,GAAGP,MAAM,CAACI,IAAI,CAACP,MAAM;EACrF;EACA,IAAGG,MAAM,CAACC,IAAI,KAAK,aAAa,EAAC,CAEjC;EAEA,OAAON,gBAAgB;AAC3B,CAAC;AACD,MAAMa,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGrB,UAAU,CAACO,WAAW,EAAEH,gBAAgB,CAAC;;EAEjF;EACA;EACA;EACA,MAAMkB,kBAAkB,GAAGT,IAAI,IAAI;IAC/BQ,kBAAkB,CAAC;MAACX,IAAI,EAAE,UAAU;MAACG,IAAI,EAACA;IAAK,CAAC,CAAC;EACrD,CAAC;EACD,MAAMU,qBAAqB,GAAGV,IAAI,IAAI;IAClCQ,kBAAkB,CAAC;MAACX,IAAI,EAAE,aAAa;MAACc,MAAM,EAACX;IAAK,CAAC,CAAC;EAC1D,CAAC;;EAED;EACA,MAAMY,WAAW,GAAG;IAChB;IACApB,KAAK,EAACe,SAAS,CAACf,KAAK;IACrB;IACAU,WAAW,EAAEK,SAAS,CAACL,WAAW;IAClCW,OAAO,EAAEJ,kBAAkB;IAC3BK,UAAU,EAAEJ;EAChB,CAAC;EACD;EACA,oBAAOpB,OAAA,CAACF,WAAW,CAAC2B,QAAQ;IAACC,KAAK,EAAEJ,WAAY;IAAAK,QAAA,EAC3CZ,KAAK,CAACY;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAEI;AAC3B,CAAC;AAAAf,EAAA,CA5BKF,YAAY;AAAAkB,EAAA,GAAZlB,YAAY;AA8BlB,eAAeA,YAAY;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}